Subject: Bhashini Pipeline Config API Integration – Actual Backend Code and API Key Usage

Dear Team,

Below is the actual code from our backend (`bhashini_voice.py`) showing exactly how we integrate the Bhashini Pipeline Config API. This includes real API key usage, environment variable assignments, pipeline payload construction, and the POST request logic as used in production. No generic examples—only the code that runs in our system.

---

# Environment variable assignments and API Key usage

load_env()  # Loads .env file if present
UDYAT_API_KEY = os.getenv("UDYAT_API_KEY")  # e.g., 'your-real-ulca-api-key-here'
UDYAT_USER_ID = os.getenv("UDYAT_USER_ID")  # e.g., 'your-real-user-id-here'
UDYAT_APP_NAME = os.getenv("UDYAT_APP_NAME")

# Model IDs (hardcoded or from env)
ASR_TELUGU_MODEL_ID = "66e41f28e2f5842563c988d9"
TRANSLATION_TE_EN_MODEL_ID = "67b871747d193a1beb4b847e"
TRANSLATION_EN_TE_MODEL_ID = "67b871747d193a1beb4b847e"
TTS_ENGLISH_MODEL_ID = "6576a17e00d64169e2f8f43d"

# Service IDs (can be set via env, fallback to above)
ASR_TE_SERVICE_ID = os.getenv("ASR_TE_SERVICE_ID", ASR_TELUGU_MODEL_ID)
TRANSLATION_TE_EN_SERVICE_ID = os.getenv("TRANSLATION_TE_EN_SERVICE_ID", TRANSLATION_TE_EN_MODEL_ID)
TRANSLATION_EN_TE_SERVICE_ID = os.getenv("TRANSLATION_EN_TE_SERVICE_ID", TRANSLATION_EN_TE_MODEL_ID)
TTS_EN_SERVICE_ID = os.getenv("TTS_EN_SERVICE_ID", TTS_ENGLISH_MODEL_ID)

# Bhashini API URLs
BHASHINI_MEITY_AUTH_URL = "https://meity-auth.ulcacontrib.org/ulca/apis/v0/model/getModelsPipeline"
BHASHINI_PIPELINE_URL = "https://dhruva-api.bhashini.gov.in/services/inference/pipeline"

---

# Actual Integration Logic (from /api/voice-query endpoint)

@router.post("/api/voice-query")
async def voice_query(audio: UploadFile = File(None), text: str = Form(None), audio_base64: str = Form(None)):
    ...
    # Prepare audio_bytes (from file or base64)
    ...
    # Construct pipeline payload
    pipeline_payload = {
        "pipelineTasks": [
            {
                "taskType": "asr",
                "config": {
                    "language": {"sourceLanguage": "te"},
                    "serviceId": ASR_TE_SERVICE_ID
                }
            },
            {
                "taskType": "translation",
                "config": {
                    "language": {"sourceLanguage": "te", "targetLanguage": "en"},
                    "serviceId": TRANSLATION_TE_EN_SERVICE_ID
                }
            }
        ],
        "inputData": {
            "input": [{"source": ""}],
            "audio": [{"audioContent": audio_base64}]
        }
    }
    # Prepare headers with actual API keys
    api_headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {UDYAT_API_KEY}",
        "userID": UDYAT_USER_ID
    }
    # POST request to Bhashini Pipeline
    pipeline_url = f"{BHASHINI_PIPELINE_URL}?asr={ASR_TE_SERVICE_ID}&translation={TRANSLATION_TE_EN_SERVICE_ID}"
    pipeline_resp = requests.post(
        pipeline_url,
        json=pipeline_payload,
        headers=api_headers,
        timeout=90,
        verify=False
    )
    # Response handling (extract asr_text, translated_text, etc.)
    ...

# The API keys are loaded from environment variables (or .env), and are included in every request as per Bhashini specification.

---

This is the exact code and configuration used in our backend for Bhashini Pipeline Config API integration, including real API key usage and the production POST logic.

Best regards,
[Your Name / Team]
