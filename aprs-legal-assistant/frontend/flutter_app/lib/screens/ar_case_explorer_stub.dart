import 'package:model_viewer_plus/model_viewer_plus.dart';
import 'package:flutter/material.dart';
import 'dart:html' as html;
import 'dart:convert';
import 'package:http/http.dart' as http;
import '../models/ar_courtroom_scenarios.dart';
import '../models/persona_voice_map.dart';
import '../models/courtroom_hotspots.dart';
import '../widgets/ar_camera_controls.dart';
import '../widgets/ar_annotations.dart';
import 'animated_courtroom_loading.dart';
import '_audio_control_island.dart';
import 'glow_corners_effect.dart';
import 'ar_case_explorer_interface.dart';
import '../widgets/ar_viewing_modes.dart';

/// Web-based 3D Case Explorer using model_viewer_plus
class ARCaseExplorerScreenStub extends StatefulWidget implements ARCaseExplorerScreenBase {
  const ARCaseExplorerScreenStub({Key? key}) : super(key: key);

  @override
  State<ARCaseExplorerScreenStub> createState() => _ARCaseExplorerScreenStubState();
}

class _ARCaseExplorerScreenStubState extends State<ARCaseExplorerScreenStub> {
  html.SpeechSynthesisUtterance? _utterance;
  html.AudioElement? _audioElement;
  CourtroomScenario? _selectedScenario;
  bool _isLoading = false;
  String? _responseText;
  double _ttsSpeed = 0.85;
  double _ttsPitch = 1.0;
  double _ttsVolume = 1.0;
  bool _aiActive = false;
  
  // AR enhancement variables
  ARCameraMode _cameraMode = ARCameraMode.orbit;
  bool _arEnabled = true;
  bool _autoRotateEnabled = true;
  CourtroomHotspot? _selectedHotspot;
  String _cameraOrbit = '45deg 55deg 2.5m';
  String _cameraTarget = '0m 1.5m 0m';
  bool _showAnnotations = true;
  bool _showControls = true;

  @override
  void initState() {
    super.initState();

    // Try to preload voices after a short delay
    Future.delayed(Duration(milliseconds: 500), () {
      final synth = html.window.speechSynthesis;
      if (synth != null) {
        synth.getVoices(); // This usually triggers voice loading
      }
    });

    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (_selectedScenario == null) {
        _pickScenario();
      }
    });
  }
  
  Future<void> _pickScenario() async {
    if (courtroomScenarios.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('No scenarios available')),
      );
      return;
    }

    final scenario = await showDialog<CourtroomScenario>(
      context: context,
      builder: (context) {
        return SimpleDialog(
          title: const Text('Choose a Courtroom Scenario'),
          children: courtroomScenarios.map((s) => SimpleDialogOption(
            child: Text(s.title),
            onPressed: () => Navigator.pop(context, s),
          )).toList(),
        );
      },
    );

    if (scenario != null) {
      setState(() {
        _selectedScenario = scenario;
        _responseText = null;
      });
    }
  }

  Future<void> _speakAI(CourtroomPersona persona) async {
    if (_selectedScenario == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Please select a scenario first')),
      );
      return;
    }

    setState(() {
      _isLoading = true;
      _responseText = null;
      _aiActive = true;
    });

    final prompt = '${persona.prompt}\nScenario: ${_selectedScenario!.description}';
    final aiText = 'Sample AI response for ${persona.name} in the role of ${persona.role}. '
        'This is a demonstration of the browser voice synthesis. '
        'In a real scenario, this would be generated by an AI model based on the courtroom scenario.';

    try {
      // Cancel any existing speech
      if (_audioElement != null) {
        _audioElement?.pause();
        _audioElement?.remove();
        _audioElement = null;
      }
      
      final synth = html.window.speechSynthesis;
      if (synth != null) {
        synth.cancel();
      }
      
      _useBrowserTTS(persona, aiText);
    } catch (e) {
      setState(() {
        _isLoading = false;
        _responseText = 'Voice error: $e';
        _aiActive = false;
      });
    }
  }
  
  void _useBrowserTTS(CourtroomPersona persona, String aiText) {
    try {
      final synth = html.window.speechSynthesis;
      if (synth != null) {
        final utter = html.SpeechSynthesisUtterance('${persona.name}: $aiText');
        _utterance = utter;

        utter.lang = 'en-US';
        utter.rate = _ttsSpeed;
        utter.pitch = _ttsPitch;
        utter.volume = _ttsVolume;

        final voices = synth.getVoices();
        final desiredVoice = personaVoiceMap[persona.role];

        if (desiredVoice != null && voices.isNotEmpty) {
          try {
            final match = voices.firstWhere(
              (v) => v.name == desiredVoice,
              orElse: () => voices.first,
            );
            utter.voice = match;
          } catch (e) {
            print('Voice selection error: $e');
          }
        }

        // Event listeners
        utter.addEventListener('end', (event) {
          setState(() {
            _isLoading = false;
            _responseText = 'Browser TTS completed';
            _aiActive = false;
          });
        });

        utter.addEventListener('error', (event) {
          setState(() {
            _isLoading = false;
            _responseText = 'Browser TTS error';
            _aiActive = false;
          });
        });

        synth.speak(utter);
        setState(() {
          _responseText = 'Playing browser TTS voice';
        });
      }
    } catch (e) {
      setState(() {
        _isLoading = false;
        _responseText = 'Browser TTS error: $e';
        _aiActive = false;
      });
    }
  }

  Widget _buildPersonaButton(CourtroomPersona persona) {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 4.0),
      child: ElevatedButton.icon(
        icon: Icon(
          _getPersonaIcon(persona.role),
          color: _getPersonaColor(persona.role),
        ),
        style: ElevatedButton.styleFrom(
          padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
          backgroundColor: _aiActive ? Colors.grey.shade700 : Colors.grey.shade600,
          disabledBackgroundColor: Colors.grey.shade800,
        ),
        onPressed: _isLoading ? null : () => _speakAI(persona),
        label: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              persona.name,
              style: const TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
            ),
            Text(
              persona.role,
              style: const TextStyle(fontSize: 12, color: Colors.white70),
            ),
          ],
        ),
      ),
    );
  }
  
  IconData _getPersonaIcon(String role) {
    switch (role.toLowerCase()) {
      case 'judge': return Icons.gavel;
      case 'prosecutor': return Icons.person;
      case 'defense': return Icons.people;
      case 'witness': return Icons.record_voice_over;
      case 'defendant': return Icons.person_outline;
      default: return Icons.person;
    }
  }
  
  Color _getPersonaColor(String role) {
    switch (role.toLowerCase()) {
      case 'judge': return Colors.purple;
      case 'prosecutor': return Colors.red;
      case 'defense': return Colors.blue;
      case 'witness': return Colors.orange;
      case 'defendant': return Colors.green;
      default: return Colors.grey;
    }
  }

  void _updateCameraView(ARCameraMode mode) {
    setState(() {
      _cameraMode = mode;
      switch (mode) {
        case ARCameraMode.orbit:
          _cameraOrbit = '45deg 55deg 2.5m';
          _cameraTarget = '0m 1.5m 0m';
          break;
        case ARCameraMode.firstPerson:
          _cameraOrbit = '0deg 90deg 1.2m';
          _cameraTarget = '0m 1.5m -2m';
          break;
        case ARCameraMode.topDown:
          _cameraOrbit = '0deg 0deg 5m';
          _cameraTarget = '0m 0m 0m';
          break;
        case ARCameraMode.frontView:
          _cameraOrbit = '0deg 90deg 4m';
          _cameraTarget = '0m 1.5m 0m';
          break;
        case ARCameraMode.sideView:
          _cameraOrbit = '90deg 90deg 4m';
          _cameraTarget = '0m 1.5m 0m';
          break;
      }
    });
  }
  
  void _resetCamera() {
    setState(() {
      _cameraMode = ARCameraMode.orbit;
      _cameraOrbit = '45deg 55deg 2.5m';
      _cameraTarget = '0m 1.5m 0m';
    });
  }
  
  void _toggleAnnotations() {
    setState(() {
      _showAnnotations = !_showAnnotations;
    });
  }
  
  void _toggleControls() {
    setState(() {
      _showControls = !_showControls;
    });
  }
  
  void _selectHotspot(CourtroomHotspot hotspot) {
    setState(() {
      if (_selectedHotspot?.id == hotspot.id) {
        _selectedHotspot = null;
      } else {
        _selectedHotspot = hotspot;
        // Update camera target and orbit for the selected hotspot
        _cameraTarget = hotspot.position;
        // Adjust orbit to look at the hotspot from a good angle
        _cameraOrbit = '${hotspot.normal} 2m';
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Courtroom AR Explorer'),
        actions: [
          IconButton(
            icon: Icon(_showAnnotations ? Icons.info : Icons.info_outline),
            tooltip: _showAnnotations ? 'Hide Annotations' : 'Show Annotations',
            onPressed: _toggleAnnotations,
          ),
          IconButton(
            icon: Icon(_showControls ? Icons.tune : Icons.tune_outlined),
            tooltip: _showControls ? 'Hide Controls' : 'Show Controls',
            onPressed: _toggleControls,
          ),
          IconButton(
            icon: const Icon(Icons.settings),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                const SnackBar(content: Text('Settings coming soon')),
              );
            },
          ),
        ],
      ),
      body: Stack(
        children: [
          // Main content area with model viewer
          Column(
            children: [
              Expanded(
                child: Builder(builder: (context) {
                  if (_selectedScenario == null) {
                    return const Center(child: Text('Please select a scenario'));
                  }
                  
                  // Define error widget for when model fails to load
                  Widget errorWidget = Center(
                    child: Column(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        const Icon(Icons.error_outline, size: 64, color: Colors.red),
                        const SizedBox(height: 16),
                        const Text('Failed to load 3D courtroom model', style: TextStyle(fontWeight: FontWeight.bold)),
                        const SizedBox(height: 8),
                        ElevatedButton.icon(
                          icon: const Icon(Icons.refresh),
                          label: const Text('Retry'),
                          onPressed: () {
                            setState(() {
                              // Force rebuild of model viewer
                            });
                          },
                        ),
                      ],
                    ),
                  );
                  
                  return Stack(
                    children: [
                      // 3D Model Viewer with error handling
                      Builder(builder: (context) {
                        try {
                          return GlowCornersEffect(
                            active: true,
                            child: Container(
                              padding: const EdgeInsets.all(8),
                              child: ModelViewer(
                                src: 'assets/models/court.glb',
                                alt: 'A 3D model of a courtroom',
                                ar: _arEnabled,
                                arModes: const ['scene-viewer', 'webxr', 'quick-look'],
                                autoRotate: _autoRotateEnabled,
                                autoRotateDelay: 2000,
                                rotationPerSecond: '30deg',
                                cameraControls: true,
                                cameraTarget: _cameraTarget,
                                cameraOrbit: _cameraOrbit,
                                fieldOfView: '30deg',
                                // Simplify orbit constraints to avoid errors
                                maxCameraOrbit: 'auto auto 10m',
                                minCameraOrbit: 'auto auto 1.5m',
                                // Remove skybox and environment images to simplify
                                exposure: 1.0,
                                shadowIntensity: 1.0,
                                shadowSoftness: 1.0,
                                loading: Loading.eager,
                                reveal: Reveal.auto,
                                interpolationDecay: 200,
                                disableZoom: false,
                                disableTap: false,
                                disablePan: false,
                                touchAction: TouchAction.panY,
                                interactionPromptThreshold: 3000,
                                backgroundColor: const Color(0xFF303030),
                                // Add CSS to ensure model is visible
                                relatedCss: '''
                                model-viewer {
                                  width: 100%;
                                  height: 100%;
                                  background-color: #303030;
                                  --poster-color: transparent;
                                }
                                ''',
                                // Add hotspots to the model
                                innerModelViewerHtml: courtroomHotspots.map((hotspot) => '''
                                  <button
                                    class="hotspot"
                                    slot="hotspot-${hotspot.id}"
                                    data-position="${hotspot.position}"
                                    data-normal="${hotspot.normal}"
                                    data-visibility-attribute="visible"
                                  >
                                    <div class="annotation">${hotspot.name}</div>
                                  </button>
                                ''').join(''),
                              ),
                            ),
                          );
                        } catch (e) {
                          print('Error rendering model viewer: $e');
                          return errorWidget;
                        }
                      }),
                      
                      // Annotations overlay at the bottom
                      if (_showAnnotations)
                        Positioned(
                          bottom: 0,
                          left: 0,
                          right: 0,
                          child: ARAnnotations(
                            hotspots: courtroomHotspots,
                            selectedHotspot: _selectedHotspot,
                            onHotspotSelected: _selectHotspot,
                          ),
                        ),
                      
                      // Camera controls overlay on the right
                      if (_showControls)
                        Positioned(
                          top: 16,
                          right: 16,
                          child: ARCameraControls(
                            currentMode: _cameraMode,
                            onModeChanged: _updateCameraView,
                            onReset: _resetCamera,
                          ),
                        ),
                      
                      // AR mode controls overlay on the left
                      if (_showControls)
                        Positioned(
                          top: 16,
                          left: 16,
                            child: ARViewingControls(
                            arEnabled: _arEnabled,
                            autoRotateEnabled: _autoRotateEnabled,
                            onARToggled: (value) => setState(() => _arEnabled = value),
                            onAutoRotateToggled: (value) => setState(() => _autoRotateEnabled = value),
                          ),
                        ),
                      
                      // Selected hotspot info card
                      if (_selectedHotspot != null)
                        Positioned(
                          bottom: 120,
                          left: 16,
                          right: 16,
                          child: HotspotInfoCard(
                            hotspot: _selectedHotspot!,
                            onClose: () => setState(() => _selectedHotspot = null),
                          ),
                        ),
                    ],
                  );
                }),
              ),
              
              // Bottom control panel
              Container(
                color: Colors.grey.shade900,
                child: ExpansionTile(
                  title: Text(
                    _selectedScenario?.title ?? 'Select Scenario',
                    style: const TextStyle(color: Colors.white),
                  ),
                  leading: const Icon(Icons.movie, color: Colors.white),
                  collapsedIconColor: Colors.white,
                  iconColor: Colors.white,
                  children: [
                    Container(
                      padding: const EdgeInsets.all(16),
                      color: Colors.grey.shade800,
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          // Scenario selector
                          ElevatedButton.icon(
                            icon: const Icon(Icons.movie),
                            label: Text(_selectedScenario != null
                                ? 'Change: ${_selectedScenario!.title}'
                                : 'Select Scenario'),
                            onPressed: _pickScenario,
                            style: ElevatedButton.styleFrom(
                              padding: const EdgeInsets.symmetric(vertical: 12),
                            ),
                          ),
                          
                          if (_selectedScenario != null) ...[
                            const SizedBox(height: 16),
                            Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: Colors.grey.shade700,
                                borderRadius: BorderRadius.circular(8),
                              ),
                              child: Text(
                                _selectedScenario!.description,
                                style: const TextStyle(fontSize: 14, color: Colors.white),
                              ),
                            ),
                            
                            const SizedBox(height: 16),
                            const Text(
                              'Court Personas:',
                              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold, color: Colors.white),
                            ),
                            const SizedBox(height: 8),
                            
                            // Persona buttons in a horizontal scrollable area
                            SizedBox(
                              height: 80,
                              child: _selectedScenario!.personas.isEmpty
                                ? const Center(child: Text('No personas available', style: TextStyle(color: Colors.white)))
                                : ListView(
                                    scrollDirection: Axis.horizontal,
                                    children: _selectedScenario!.personas
                                      .map(_buildPersonaButton)
                                      .toList(),
                                  ),
                            ),
                            
                            // Audio controls panel
                            if (!_isLoading && _utterance != null)
                              Column(
                                children: [
                                  AudioControlIsland(
                                    ttsSpeed: _ttsSpeed,
                                    ttsPitch: _ttsPitch,
                                    ttsVolume: _ttsVolume,
                                    onSpeedChanged: (value) => setState(() => _ttsSpeed = value),
                                    onPitchChanged: (value) => setState(() => _ttsPitch = value),
                                    onVolumeChanged: (value) => setState(() => _ttsVolume = value),
                                  ),
                                ],
                              ),
                          ],
                            
                          if (_isLoading) ...[
                            const SizedBox(height: 16),
                            const Center(child: AnimatedCourtroomLoading()),
                          ],
                            
                          if (_responseText != null && !_isLoading) ...[
                            const SizedBox(height: 16),
                            Container(
                              padding: const EdgeInsets.all(8),
                              decoration: BoxDecoration(
                                color: _responseText!.contains('error') 
                                    ? Colors.red.shade800 
                                    : Colors.green.shade800,
                                borderRadius: BorderRadius.circular(8),
                                border: Border.all(
                                  color: _responseText!.contains('error') 
                                      ? Colors.red.shade600 
                                      : Colors.green.shade600,
                                ),
                              ),
                              child: Text(
                                _responseText!,
                                style: TextStyle(
                                  color: Colors.white,
                                ),
                              ),
                            ),
                          ],
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }
}

/// Implementation of the AR Case Explorer Screen for web
/// Using the ARCaseExplorerScreenStub class
class ARCaseExplorerScreenImpl extends StatelessWidget implements ARCaseExplorerScreenBase {
  const ARCaseExplorerScreenImpl({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return const ARCaseExplorerScreenStub();
  }
}
